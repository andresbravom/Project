# type Street {
#     _id: ID!
#     name: String!
#     lenght: Float!
#     speed: Int!
#     segment: [Segment]!
#     values: [Values]!
# }
type Route {
    _id: ID!
    name: String!
    subroutes: [Subroute]!
    O3: Float!
}
type Subroute {
    _id: ID!
    name: String!
    lenght: Float!
    speed: Int!
    segments: [Segments]!
    route: Route!
    Energy: Float!
}
type Segments {
    _id: ID!
    subroute: [Subroute]!
    lenghtSegment: Float!
    index: Int!
    probability: Float!
    O: String!
    OValues: Float!
}
type VehicleValues { 
    _id: ID!
    p: Float!
    Cd: Float!
    A: Float!
    M: Float!
    G: Float!
    fr: Float!
    a: Float!
    alpha: Float!
}
# type Segment {
#     _id:ID
#     index: Int!
#     lenghtSegment: Float!
#     street: Street!
#     signal: [Signal]
# }
# type Signal {
#     _id: ID!
#     name: String!
#     location: Float!
#     type: String!
#     probability: Float!
#     description: String!
#     segment: [Segment!]
# }
# type Values { 
#     _id: ID!
#     street: Street!
#     p: Float!
#     Cd: Float!
#     A: Float!
#     M: Float!
#     G: Float!
#     fr: Float!
#     a: Float!
#     alfa: Float!
# }
type Query {
    getRouteName(name: String!): Route!
    getRoute: [Route]!
    getSubrouteName(name: String!): Subroute!
    getSubroute: [Subroute]!
    getSegmentsID(_id: ID!): Segments!
    getSegments: [Segments]!
    getSegmentsSubroute(subroute: ID!): [Segments]!
    getVehicleValuesID(_id: ID!): VehicleValues!
    getVehicleValues: [VehicleValues]!





    # getStreetID(_id: ID): Street
    # # getIntersectionID(_id: ID): [Intersection]
    # getSegmentID(_id: ID): [Segment]
    # getSignalID(_id: ID): [Signal]
    # getStreet: [Street]
    # # getIntersection: [Intersection]
    # getSegment: [Segment]
    # getSignal: [Signal]
    # getEnergySubRoute(street: ID, values: ID!): Float!
    # getValues: [Values]
    # getO1(street: ID!, values: ID!): Float!
    # getO2Acceleration(street: ID!, values: ID!): Float!
    # getO2Braking(street: ID!, values: ID!): Float!
    # getO3Acceleration(street: ID!, values: ID!): Float!
    # getO3Braking(street: ID!, values: ID!): Float!
}
type Mutation {
    addRoute(name: String!): Route!
    addSubroute(route: ID!, name: String!, lenght: Float!, speed: Int!): Subroute!
    addSegments(subroute: ID!): Segments!
    addProbability(subroute: ID!, probability: [Float!]): Subroute!
    addVehicleValues (p: Float!, Cd: Float!, A: Float!, M: Float!, G: Float!, fr: Float!, a: Float!, alpha: Float!): VehicleValues!
    addOValues (route: ID!, vehicleValues: ID!): Route!
    addO3Values (route: ID!, vehicleValues: ID!): Route!
    addEnergySubroute (route: ID!): Route!






    # addStreet (name: String!, lenght: Float!, speed: Int!): Street!
    # # addIntersection (lenght: Float!, rightState: Boolean, leftState: Boolean, frontState: Boolean, street: [ID]!): Intersection!
    # addSegment (street: ID!, signal: [ID]): Segment!
    # addSignal (name: String!, location: Float!, type: String!, probability: Float!, description: String): Signal!
    # addValues (street: ID!, p: Float!, Cd: Float!, A: Float!, M: Float!, G: Float!, fr: Float!, a: Float!, alfa: Float!): Values!
    # updateValues (_id: ID!, p: Float, Cd: Float, A: Float, M: Float, G: Float, fr: Float): Values!
    # updateStreet (_id: ID!, name: String, lenght: Float, speed: Int): Street!
    # # updateSegment (id: ID!, lenght: Float, speed: Int, startCoordinate: [Float], middleCoordinate: [Float], endCoordinate: [Float], intersection: [Float], street: ID!, signal: [ID!]): Segment!
    # updateSignal (_id: ID!, name: String, location: Float, type: String, probability: Float, description: String): Signal!
    # removeStreet (_id: ID!): Street!
    # removeSegments (street: ID!): Segment!
    # removeValues (_id: ID!): Values!
    # removeSignal (_id: ID): Signal!
}